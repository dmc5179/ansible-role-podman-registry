---
# tasks file for podman-registry

- name: Install Dependencies
  package:
    name:
      - podman
      - httpd
      - httpd-tools
      - mod_ssl
      - firewalld
      - skopeo
    state: present

- name: make directories
  with_items:
    - '{{docker_registry_conf_dir}}'
    - '{{docker_registry_conf_dir}}/auth'
    - '{{docker_registry_conf_dir}}/pki'
    - '{{docker_registry_letsencrypt_dir_on_host}}'
    - '{{docker_registry_storage_fs_root_directory_on_host}}'
  file:
    state: directory
    dest: '{{item}}'
    owner: root
    group: root
    mode: 0700

- name: Upgrade pip
  pip:
    name: pip
    state: present
    version: '20.0.2'

- name: Install passlib for htpassword
  pip:
    name: passlib
    state: present
    version: '1.7.2'

- name: Install bcrypt for htpassword
  pip:
    name: bcrypt
    state: present
    version: '3.1.7'

- name: Install cryptography for htpassword
  pip:
    name: cryptography
    state: present
    version: '2.9.2'

- name: add passwds to /etc/docker-registry/auth/registry.htpasswd
  with_items: '{{docker_registry_users}}'
  htpasswd:
    path: '{{docker_registry_conf_dir}}/auth/registry.htpasswd'
    mode: 0600
    name: '{{item.uid}}'
    password: '{{item.pwd}}'
    crypt_scheme: bcrypt

- name: templatize...
  template:
    src: 'config.yml.j2'
    dest: '{{docker_registry_conf_dir}}/config.yml'
    mode: '0644'

# Generate Certificates
- include: certs.yml

# Configure Firewall Settings
- include: firewall.yml

- name: Pull docker registry image
  podman_image:
    name: docker.io/library/registry
    tag: 2
    state: present
  when: (not disconnected | bool)

# podman run --name registry_server -p ${REGISTRY_PORT}:5000 \
# -v ${REGISTRY_DIR}/data:/var/lib/registry:z \
# -v ${REGISTRY_DIR}/auth:/auth:z \
# -e "REGISTRY_AUTH=htpasswd" \
# -e "REGISTRY_AUTH_HTPASSWD_REALM=Registry" \
# -e "REGISTRY_HTTP_SECRET=ALongRandomSecretForRegistry" \
# -e REGISTRY_AUTH_HTPASSWD_PATH=/auth/htpasswd \
# -v ${REGISTRY_DIR}/certs:/certs:z \
# -e REGISTRY_HTTP_TLS_CERTIFICATE=/certs/domain.crt \
# -e REGISTRY_HTTP_TLS_KEY=/certs/domain.key \
# --hostname=${REGISTRY_HOSTNAME} \
# --detach \
# docker.io/library/registry:2

# Configure SELinux to allow containers in systemd services
- name: Set container_manage_cgroup SELinux Boolean
  seboolean:
    name: container_manage_cgroup
    state: true
    persistent: true
  when:
    (ansible_distribution == 'RedHat' or ansible_distribution == 'CentOS') and
    (ansible_distribution_major_version == '7')

- name: launching registry container...
  command: >
    podman run --name '{{docker_registry_container_name}}' -p '{{docker_registry_https_port}}:5000'
    -v '{{docker_registry_conf_dir}}/config.yml:/etc/docker/registry/config.yml:ro'
    -v '{{docker_registry_conf_dir}}/auth:/auth:ro'
    -v '{{docker_registry_conf_dir}}/pki:/pki:ro'
    -v '{{docker_registry_storage_fs_root_directory_on_host}}:{{docker_registry_storage_fs_root_directory}}:rw'
    -v '{{docker_registry_letsencrypt_dir_on_host}}:{{docker_registry_letsencrypt_dir}}:rw'
    --detach
    '{{docker_registry_container}}'
  when: docker_registry_activate

#- name: Install service file for podman registry
#  template:
#    src: 'podman-registry.service.j2'
#    dest: '/usr/lib/systemd/system/podman-registry.service'
#    mode: '0644'
#
#- name: Enable podman registry systemd service
#  systemd:
#    name: podman-registry
#    daemon-reload: true
#    enabled: true
#    state: started

# Test the connection
# curl -u dummy:dummy https://${REGISTRY_HOSTNAME}:${REGISTRY_PORT}/v2/_catalog
