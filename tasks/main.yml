---
# tasks file for podman-registry
- name: Install Dependencies (RHEL 8)
  become: true
  yum:
    name:
      - podman
    state: present
  when: >
    (ansible_distribution == "RedHat" and
    ansible_distribution_major_version >= '8')

- name: Install Dependencies (RHEL 7)
  become: true
  vars:
    ansible_python_interpreter: '/usr/bin/python2'
  package:
    name: 
      - podman
      - libselinux-python
    state: present
  when: >
    (ansible_distribution == "RedHat" and
    ansible_distribution_major_version < '8') 

- name: Upgrade pip on RHEL 7
  become: true
  pip:
    name: pip
    executable: "{{ pip_cmd }}"
    state: latest
    extra_args: '{{ pip_args }}'
  when: >
    (ansible_distribution == "RedHat" and
    ansible_distribution_version < '8')

#- name: debug
#  debug:
#    var: ansible_distribution

#- fail:
#    msg: "stop here"

- name: Target User ID
  command: 'id -u'
  register: registry_user

#- name: show user
#  debug:
#    var: registry_user

- name: Target Group ID
  command: 'id -g'
  register: registry_group

#- name: show group
#  debug:
#    var: registry_group

- name: Create mirror base
  become: true
  file:
    dest: '{{ registry_base }}'
    owner: '{{ registry_user.stdout | int }}'
    group: '{{ registry_group.stdout | int }}'
    mode: '0755'
    state: directory

- name: make directories
  become: true
  with_items:
    - '{{docker_registry_conf_dir}}'
    - '{{docker_registry_conf_dir}}/auth'
    - '{{docker_registry_conf_dir}}/pki'
    - '{{docker_registry_letsencrypt_dir_on_host}}'
    - '{{docker_registry_storage_fs_root_directory_on_host}}'
  file:
    state: directory
    dest: '{{item}}'
    owner: '{{ registry_user.stdout | int }}'
    group: '{{ registry_group.stdout | int }}'
    mode: 0755
  tags:
    - certificates

- name: Set pip args
  set_fact:
    pip_args: '{{ pip_args }} --user'
  when: (not run_as_root)

- name: Install passlib for htpassword
  become: "{{ run_as_root }}"
  pip:
    name: passlib
    executable: "{{ pip_cmd }}"
    state: present
    extra_args: '{{ pip_args }}'

- name: Install bcrypt for htpassword
  become: "{{ run_as_root }}"
  pip:
    name: bcrypt
    executable: "{{ pip_cmd }}"
    state: present
    extra_args: '{{ pip_args }}'

- name: Install cryptography for htpassword
  become: "{{ run_as_root }}"
  pip:
    name: cryptography
    executable: "{{ pip_cmd }}"
    state: present
    extra_args: '{{ pip_args }}'

- name: add passwds to auth/registry.htpasswd
  become: "{{ run_as_root }}"
  with_items: '{{docker_registry_users}}'
  htpasswd:
    path: '{{docker_registry_conf_dir}}/auth/registry.htpasswd'
    mode: 0600
    name: '{{item.uid}}'
    password: '{{item.pwd}}'
    crypt_scheme: bcrypt

- name: templatize...
  become: "{{ run_as_root }}"
  template:
    src: 'config.yml.j2'
    dest: '{{docker_registry_conf_dir}}/config.yml'
    mode: '0644'

# Generate Certificates
- include: certs.yml

# Configure Firewall Settings
- include: firewall.yml

# Configure SELinux to allow containers in systemd services
- name: Set container_manage_cgroup SELinux Boolean
  become: true
  vars:
    ansible_python_interpreter: '/usr/bin/python2'
  seboolean:
    name: container_manage_cgroup
    state: true
    persistent: true
  when:
    - ansible_selinux.status is defined and
      ansible_selinux.status == "enabled" and
      ansible_distribution == 'RedHat' and
      ansible_distribution_major_version == '7'

- name: Set container_manage_cgroup SELinux Boolean
  become: true
  sysctl:
    name: user.max_user_namespaces
    value: '10000'
    state: present
    sysctl_set: true
    reload: true
  when:
    - ansible_selinux.status is defined and
      ansible_selinux.status == "enabled" and
      ansible_distribution == 'RedHat' and
      ansible_distribution_major_version == '7'

- name: Pull docker registry image
  become: "{{ run_as_root }}"
  podman_image:
    name: "{{ docker_registry_container }}"
    tag: "{{ docker_registry_container_tag }}"
    state: present
  when: (not air_gapped | bool)

- name: Load docker registry image into local container storage
  become: "{{ run_as_root }}"
  command: |
    skopeo copy "docker-archive://{{ docker_registry_image_archive }}"
    "containers-storage:{{ docker_registry_container }}:{{ docker_registry_container_tag }}"
  when: (air_gapped | bool)

- name: Removing existing container
  become: "{{ run_as_root }}"
  containers.podman.podman_container:
    name: '{{docker_registry_container_name}}'
    state: absent

- name: launching registry container (RHEL 8)
  become: "{{ run_as_root }}"
  command: >
    podman create --name '{{docker_registry_container_name}}'
    -p '{{docker_registry_https_port}}:5000'
    -v '{{docker_registry_conf_dir}}/config.yml:/etc/docker/registry/config.yml:ro,Z'
    -v '{{docker_registry_conf_dir}}/auth:/auth:ro,Z'
    -v '{{docker_registry_conf_dir}}/pki:/pki:ro,Z'
    -v '{{docker_registry_storage_fs_root_directory_on_host}}:{{docker_registry_storage_fs_root_directory}}:rw,Z'
    -v '{{docker_registry_letsencrypt_dir_on_host}}:{{docker_registry_letsencrypt_dir}}:rw,Z'
    '{{docker_registry_container}}:{{ docker_registry_container_tag }}'
  when: >
    docker_registry_activate and
    (ansible_distribution == "RedHat" and
    ansible_distribution_major_version >= '8')
  tags:
    - launch

- name: launching registry container (RHEL 7)
  become: "{{ run_as_root }}"
  command: >
    podman run --detach --name '{{docker_registry_container_name}}'
    -p '{{docker_registry_https_port}}:5000'
    -v '{{docker_registry_conf_dir}}/config.yml:/etc/docker/registry/config.yml:ro,Z'
    -v '{{docker_registry_conf_dir}}/auth:/auth:ro,Z'
    -v '{{docker_registry_conf_dir}}/pki:/pki:ro,Z'
    -v '{{docker_registry_storage_fs_root_directory_on_host}}:{{docker_registry_storage_fs_root_directory}}:rw,Z'
    -v '{{docker_registry_letsencrypt_dir_on_host}}:{{docker_registry_letsencrypt_dir}}:rw,Z'
    '{{docker_registry_container}}:{{ docker_registry_container_tag }}'
  when: >
    docker_registry_activate and
    (ansible_distribution == "RedHat" and
    ansible_distribution_major_version < '8')
  tags:
    - launch

- name: Create systemd service for registry container
  become: '{{ run_as_root }}'
  shell: 'podman generate systemd --name --restart-policy always {{docker_registry_container_name}}'
  register: podman_systemd
  when: >
    (ansible_distribution == "RedHat" and
    ansible_distribution_major_version >= '8')

- name: Copy systemd service file in place
  become: true
  copy:
    content: '{{ podman_systemd.stdout_lines }}'
    dest: "/lib/systemd/system/podman-registry.service"
    owner: root
    group: root
    mode: 0644
  when: >
    ( run_as_root | bool ) and
    (ansible_distribution == "RedHat" and
    ansible_distribution_major_version >= '8')

- name: Create user systemd service directories
  file:
    name: '{{ ansible_env.HOME }}/.config/systemd/user'
    state: directory
  when: >
    ( not run_as_root | bool ) and
    (ansible_distribution == "RedHat" and
    ansible_distribution_major_version >= '8')

- name: Copy systemd service file in place
  copy:
    content: '{{ podman_systemd.stdout }}'
    dest: "{{ ansible_env.HOME }}/.config/systemd/user/podman-registry.service"
    mode: 0644
  when: >
    ( not run_as_root | bool ) and
    (ansible_distribution == "RedHat" and
    ansible_distribution_major_version >= '8')

- name: Start podman registry systemd service
  become: true
  systemd:
    name: 'podman-registry'
    state: started
    enabled: true
    daemon_reload: true
  when: >
    ( run_as_root | bool ) and
    (ansible_distribution == "RedHat" and
    ansible_distribution_major_version >= '8')

- name: Start podman registry systemd service
  systemd:
    name: 'podman-registry'
    state: started
    enabled: true
    daemon_reload: true
    scope: user
  when: >
    ( not run_as_root | bool ) and
    (ansible_distribution == "RedHat" and
    ansible_distribution_major_version >= '8')

# TODO: This test is not working
- name: Test the registry connection
  delegate_to: localhost
  uri:
    url: "{{ mirror_transport }}://{{ mirror_registry }}:{{ mirror_registry_port }}/v2/_catalog"
    user: '{{ docker_registry_users[0].uid }}'
    password: '{{ docker_registry_users[0].pwd }}'
    method: 'GET'
    validate_certs: false
  tags:
    - test
